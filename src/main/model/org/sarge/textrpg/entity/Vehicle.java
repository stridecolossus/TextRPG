package org.sarge.textrpg.entity;

import org.sarge.textrpg.contents.ContentStateChange;
import org.sarge.textrpg.contents.Contents;
import org.sarge.textrpg.contents.LimitedContents;
import org.sarge.textrpg.contents.LimitedContents.LimitsMap;
import org.sarge.textrpg.contents.Parent;
import org.sarge.textrpg.object.ObjectDescriptor;
import org.sarge.textrpg.object.WorldObject;
import org.sarge.textrpg.util.Percentile;
import org.sarge.textrpg.world.Exit;
import org.sarge.textrpg.world.Location;
import org.sarge.textrpg.world.Trail;

/**
 * A vehicle that can be <i>driven</i> by an actor such as a carriage, cart or boat.
 * @author Sarge
 */
public interface Vehicle extends Parent {
	/**
	 * Tests whether this vehicle can traverse the given exit.
	 * @param exit Exit
	 * @return Whether traversable
	 */
	boolean isValid(Exit exit);

	/**
	 * @return Whether this vehicle is a raft
	 */
	boolean isRaft();

	/**
	 * Moves this vehicle.
	 * @param parent Parent
	 * TODO
	 */
	void move(Location next);

	/**
	 * @return Noise generated when this vehicle moves
	 */
	Percentile noise();

	/**
	 * @return Visibility of tracks generated by this vehicle
	 */
	Percentile tracks();

	/**
	 * Partial implementation.
	 */
	abstract class AbstractVehicle extends WorldObject implements Vehicle {
		private final Contents contents;

		/**
		 * Constructor.
		 * @param descriptor		Vehicle descriptor
		 * @param limits			Contents limits
		 * @param placement			Placement key
		 */
		protected AbstractVehicle(ObjectDescriptor descriptor, LimitsMap limits, String placement) {
			super(descriptor);
			if(!descriptor.isFixture()) throw new IllegalArgumentException("Vehicles must be fixtures");
			this.contents = new LimitedContents(limits) {
				@Override
				public String placement() {
					return placement;
				}
			};
		}

		/**
		 * @return Tracks trail for this vehicle
		 */
		protected abstract Trail trail();

		@Override
		public final Contents contents() {
			return contents;
		}

		@Override
		public boolean notify(ContentStateChange notification) {
			return true;
		}

		@Override
		public void move(Location next) {
			super.parent(next);
			// TODO
//			if(prev.isTransition(next)) {
//				contents.select(Entity.class).forEach(e -> e.transition(next));
//			}
		}
	}
}
