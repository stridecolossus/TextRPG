package org.sarge.textrpg.entity;

import static org.sarge.lib.util.Check.notEmpty;
import static org.sarge.lib.util.Check.notNull;
import static org.sarge.lib.util.Check.zeroOrMore;

import java.time.Duration;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Stream;

import org.sarge.lib.collection.StrictSet;
import org.sarge.lib.util.AbstractEqualsObject;
import org.sarge.textrpg.common.Alignment;
import org.sarge.textrpg.common.CommandArgument;
import org.sarge.textrpg.common.Damage;
import org.sarge.textrpg.common.Gender;
import org.sarge.textrpg.common.Size;
import org.sarge.textrpg.common.Skill;
import org.sarge.textrpg.common.SkillSet;
import org.sarge.textrpg.common.SkillSet.MutableSkillSet;
import org.sarge.textrpg.entity.Race.Behaviour.Flag;
import org.sarge.textrpg.object.DurableObject;
import org.sarge.textrpg.object.LootFactory;
import org.sarge.textrpg.object.ObjectDescriptor;
import org.sarge.textrpg.object.Slot;
import org.sarge.textrpg.object.Weapon;
import org.sarge.textrpg.util.EnumerationIntegerMap;
import org.sarge.textrpg.util.IntegerMap;
import org.sarge.textrpg.util.Percentile;
import org.sarge.textrpg.util.TextHelper;
import org.sarge.textrpg.world.MovementManager;

/**
 * A race is a descriptor for type of entity.
 * @author Sarge
 */
public final class Race extends AbstractEqualsObject implements CommandArgument {
	/**
	 * Racial characteristics.
	 */
	public static final class Characteristics extends AbstractEqualsObject {
		private final Gender gender;
		private final Alignment align;
		private final Size size;
		private final int weight;
		private final IntegerMap<Attribute> attrs;
		private final List<String> body;
		private final Set<String> cats;

		/**
		 * Constructor.
		 * @param gender		Default gender
		 * @param align			Alignment
		 * @param size			Size
		 * @param weight		Weight
		 * @param attrs			Attributes
		 * @param body			Body-parts
		 */
		public Characteristics(Gender gender, Alignment align, Size size, int weight, IntegerMap<Attribute> attrs, List<String> body, Set<String> cats) {
			this.gender = notNull(gender);
			this.align = notNull(align);
			this.size = notNull(size);
			this.weight = zeroOrMore(weight);
			this.attrs = notNull(attrs);
			this.body = List.copyOf(body);
			this.cats = Set.copyOf(cats);
		}

		/**
		 * @return Default gender of this race
		 */
		public Gender gender() {
			return gender;
		}

		/**
		 * @return Default alignment of this race
		 */
		public Alignment alignment() {
			return align;
		}

		/**
		 * @return Size of this race
		 */
		public Size size() {
			return size;
		}

		/**
		 * @return Weight of this race
		 */
		public int weight() {
			return weight;
		}

		/**
		 * @return Attributes
		 */
		public IntegerMap<Attribute> attributes() {
			return attrs;
		}

		/**
		 * @return Body-parts
		 */
		public Stream<String> body() {
			return body.stream();
		}

		/**
		 * @return Whether this race is a member of the given category
		 */
		public boolean isCategory(String cat) {
			return cats.contains(cat);
		}
	}

	/**
	 * Default equipment and skills for this race.
	 */
	public static final class Gear extends AbstractEqualsObject {
		private final Weapon weapon;
		private final Set<ObjectDescriptor> equipment;
		private final Percentile noise;
		private final Optional<String> vocation;
		private final SkillSet skills;
		private final Skill lang;
		private final Percentile tracks;

		/**
		 * Constructor.
		 * @param weapon		Default weapon
		 * @param equipment		Initial equipment
		 * @param noise			Default noise generated by this entity when moving
		 * @param vocation		Optional vocation topic
		 * @param faction		Optional default faction for this race
		 * @param skills		Default skills
		 * @param lang			Default language
		 * @param tracks		Default visibility of tracks generated by this race
		 */
		public Gear(Weapon weapon, Set<ObjectDescriptor> equipment, Percentile noise, String vocation, SkillSet skills, Skill lang, Percentile tracks) {
			this.weapon = notNull(weapon);
			this.equipment = Set.copyOf(equipment);
			this.noise = notNull(noise);
			this.vocation = Optional.ofNullable(vocation);
			this.skills = notNull(skills);
			this.lang = notNull(lang);
			this.tracks = notNull(tracks);
		}

		/**
		 * @return Default weapon
		 */
		public Weapon weapon() {
			return weapon;
		}

		/**
		 * @return Initial equipment
		 */
		public Set<ObjectDescriptor> equipment() {
			return equipment;
		}

		/**
		 * @return Default noise generated by this entity when moving
		 */
		public Percentile noise() {
			return noise;
		}

		/**
		 * @return Vocation topic
		 */
		public Optional<String> vocation() {
			return vocation;
		}

		/**
		 * @return Default skills for this race
		 */
		public SkillSet skills() {
			return skills;
		}

		/**
		 * @return Default language for this race
		 */
		public Skill language() {
			return lang;
		}

		/**
		 * @return Default visibility of tracks generated by this race
		 */
		public Percentile tracks() {
			return tracks;
		}
	}

	/**
	 * Behaviour descriptor for AI entities.
	 */
	public static final class Behaviour extends AbstractEqualsObject {
		/**
		 * Behaviour flags.
		 */
		public enum Flag {
			/**
			 * Whether entities of this race will flee from lights.
			 */
			STARTLED,
		}

		private final MovementManager manager;
		private final Duration period;
		private final Percentile aggression;
		private final Percentile flee;
		private final EnumSet<Flag> flags;

		/**
		 * Constructor.
		 * @param manager			Movement manager
		 * @param period			Iteration period
		 * @param aggression		Aggression level
		 * @param flee				Auto-flee threshold
		 * @param flags				Behaviour flags
		 */
		public Behaviour(MovementManager manager, Duration period, Percentile aggression, Percentile flee, EnumSet<Flag> flags) {
			this.manager = notNull(manager);
			this.period = notNull(period);
			this.aggression = notNull(aggression);
			this.flee = notNull(flee);
			this.flags = EnumSet.copyOf(flags);
			verify();
		}

		private void verify() {
			if(period.isZero() != (manager == MovementManager.IDLE)) {
				throw new IllegalArgumentException("Invalid period for movement manager: " + this);
			}
		}

		/**
		 * @return Whether this behaviour is {@link MovementManager#IDLE}
		 */
		public boolean isIdle() {
			return manager == MovementManager.IDLE;
		}

		/**
		 * @return Movement manager
		 */
		public MovementManager movement() {
			return manager;
		}

		/**
		 * @return Iteration period
		 */
		public Duration period() {
			return period;
		}

		/**
		 * @return Aggression level
		 */
		public Percentile aggression() {
			return aggression;
		}

		/**
		 * @return Auto-flee threshold
		 */
		public Percentile autoflee() {
			return flee;
		}

		/**
		 * @param f Behaviour flag
		 * @return Whether an entity of this race has the given behaviour
		 */
		public boolean isFlag(Flag f) {
			return flags.contains(f);
		}
	}

	/**
	 * Descriptor for a killed member of this race.
	 */
	public static final class Kill extends AbstractEqualsObject {
		private final Optional<ObjectDescriptor> corpse;
		private final Optional<LootFactory> butcher;
//		private final List<Reward> rewards;

		/**
		 * Constructor.
		 * @param corpse		Corpse descriptor for corporeal entities
		 * @param butcher		Optional loot-factory when butchering a corpse of this race
		 * @throws IllegalArgumentException if a butcher loot-factory is provided but this race has no corpse
		 */
		public Kill(ObjectDescriptor corpse, LootFactory butcher) {
			this.corpse = Optional.ofNullable(corpse);
			this.butcher = Optional.ofNullable(butcher);
			if((corpse == null) && (butcher != null)) throw new IllegalArgumentException("Cannot butcher if race has no corpse");
		}

		/**
		 * @return Corpse descriptor for corporeal entities
		 */
		public Optional<ObjectDescriptor> corpse() {
			return corpse;
		}

		/**
		 * @return Loot-factory when butchering a corpse of this race
		 */
		public Optional<LootFactory> butcher() {
			return butcher;
		}
	}

	private final String name;
	private final Characteristics chars;
	private final Gear gear;
	private final Behaviour behaviour;
	private final Kill kill;

	/**
	 * Constructor.
	 * @param name			Race name
	 * @param chars			Racial characteristics
	 * @param gear			Default equipment and skills
	 * @param behaviour		AI behaviour
	 * @param kill			Kill descriptor
	 */
	public Race(String name, Characteristics chars, Gear gear, Behaviour behaviour, Kill kill) {
		this.name = notEmpty(name);
		this.chars = notNull(chars);
		this.gear = notNull(gear);
		this.behaviour = notNull(behaviour);
		this.kill = notNull(kill);
	}

	/**
	 * @return Name of this race
	 */
	@Override
	public String name() {
		return name;
	}

	/**
	 * @return Racial characteristics
	 */
	public Characteristics characteristics() {
		return chars;
	}

	/**
	 * @return Default equipment and skills
	 */
	public Gear gear() {
		return gear;
	}

	/**
	 * @return Behaviour descriptor for AI entities
	 */
	public Behaviour behaviour() {
		return behaviour;
	}

	/**
	 * @return Kill descriptor for this race
	 */
	public Kill kill() {
		return kill;
	}

	@Override
	public String toString() {
		return name;
	}

	/**
	 * Builder for a race.
	 */
	public static class Builder {
		private static final Weapon DEFAULT = create();

		private static Weapon create() {
			final ObjectDescriptor descriptor = new ObjectDescriptor.Builder("default.weapon").slot(Slot.MAIN).build();
			return new Weapon.Descriptor(new DurableObject.Descriptor(descriptor, Integer.MAX_VALUE), Skill.NONE, 1, Damage.DEFAULT, null, null).create();
		}

		// Race
		private final String name;

		// Characteristics
		private Gender gender = Gender.NEUTER;
		private Alignment alignment = Alignment.NEUTRAL;
		private Size size = Size.MEDIUM;
		private int weight;
		private final EnumerationIntegerMap<Attribute> attrs = new EnumerationIntegerMap<>(Attribute.class);
		private final List<String> body = new ArrayList<>();
		private final Set<String> cats = new StrictSet<>();

		// Equipment
		private Weapon weapon = DEFAULT;
		private final Set<ObjectDescriptor> equipment = new StrictSet<>();
		private Percentile noise = Percentile.ZERO;
		private String vocation;
		private final MutableSkillSet skills = new MutableSkillSet();
		private Skill lang = Skill.NONE;
		private Percentile tracks = Percentile.ONE;

		// Behaviour
		private MovementManager movement = MovementManager.IDLE;
		private Duration period = Duration.ZERO;
		private Percentile aggression = Percentile.ZERO;
		private Percentile flee = Percentile.ZERO;
		private final EnumSet<Flag> flags = EnumSet.noneOf(Flag.class);

		// Kill descriptor
		private ObjectDescriptor corpse;
		private LootFactory butcher;
//		private final List<Reward> rewards;

		/**
		 * Constructor.
		 * @param name Race name
		 */
		public Builder(String name) {
			this.name = name;
		}

		/**
		 * Sets the default gender of this race.
		 * @param gender Gender
		 */
		public Builder gender(Gender gender) {
			this.gender = gender;
			return this;
		}

		/**
		 * Sets the default alignment of this race.
		 * @param alignment Alignment
		 */
		public Builder alignment(Alignment alignment) {
			this.alignment = alignment;
			return this;
		}

		/**
		 * Sets the default size of this race.
		 * @param size Size
		 */
		public Builder size(Size size) {
			this.size = size;
			return this;
		}

		/**
		 * Sets the default weight of this race.
		 * @param weight Weight
		 */
		public Builder weight(int weight) {
			this.weight = weight;
			return this;
		}

		/**
		 * Sets an attribute for this race.
		 * @param attr		Attribute
		 * @param value		Value
		 */
		public Builder attribute(Attribute attr, int value) {
			attrs.get(attr).set(value);
			return this;
		}

		/**
		 * Adds a body-part of this race.
		 * @param part Body-part
		 */
		public Builder body(String part) {
			body.add(part);
			return this;
		}

		/**
		 * Adds this race to the given category.
		 * @param cat Category
		 */
		public Builder category(String cat) {
			cats.add(cat);
			return this;
		}

		/**
		 * Sets the default weapon of this race.
		 * @param weapon Weapon
		 */
		public Builder weapon(Weapon weapon) {
			this.weapon = weapon;
			return this;
		}

		/**
		 * Adds default equipment for this race.
		 * @param descriptor Equipment descriptor
		 */
		public Builder equipment(ObjectDescriptor descriptor) {
			equipment.add(descriptor);
			return this;
		}

		/**
		 * Sets the default noise generated when moving.
		 * @param noise Noise intensity
		 */
		public Builder noise(Percentile noise) {
			this.noise = noise;
			return this;
		}

		/**
		 * Sets the vocation topic for this race.
		 * @param vocation Vocation
		 */
		public Builder vocation(String vocation) {
			this.vocation = vocation;
			return this;
		}

		/**
		 * Adds a default skill for this race.
		 * @param Skill skill
		 */
		public Builder skill(Skill skill) {
			skills.add(skill);
			return this;
		}

		/**
		 * Sets the default language of this race.
		 * @param lang Language skill
		 */
		public Builder language(Skill lang) {
			this.lang = lang;
			return this;
		}

		/**
		 * Sets the default visibility of tracks generated by this race.
		 * @param tracks Tracks visibility
		 */
		public Builder tracks(Percentile tracks) {
			this.tracks = tracks;
			return this;
		}

		/**
		 * Sets the default movement manager.
		 * @param movement Movement manager
		 */
		public Builder movement(MovementManager movement) {
			this.movement = movement;
			return this;
		}

		/**
		 * Sets the AI iteration period.
		 * @param period Iteration period
		 */
		public Builder period(Duration period) {
			this.period = period;
			return this;
		}

		/**
		 * Sets the aggression level.
		 * @param aggression Aggression
		 */
		public Builder aggression(Percentile aggression) {
			this.aggression = aggression;
			return this;
		}

		/**
		 * Sets the auto-flee threshold.
		 * @param flee Auto-flee threshold
		 */
		public Builder autoflee(Percentile flee) {
			this.flee = flee;
			return this;
		}

		/**
		 * Adds a behaviour flag.
		 * @param f Flag
		 */
		public Builder behaviour(Flag f) {
			flags.add(f);
			return this;
		}

		/**
		 * Creates a corpse descriptor for this race.
		 */
		public Builder corpse() {
			final String name = TextHelper.join("corpse", this.name);
			this.corpse = new ObjectDescriptor.Builder(name).weight(weight).size(size).build();
			return this;
		}

		/**
		 * Sets the loot-factory when butchering a corpse of this race.
		 * @param butcher Butcher loot-factory
		 */
		public Builder butcher(LootFactory butcher) {
			this.butcher = butcher;
			return this;
		}

		/**
		 * @return New race
		 */
		public Race build() {
			final Characteristics chars = new Characteristics(gender, alignment, size, weight, attrs, body, cats);
			final Gear gear = new Gear(weapon, equipment, noise, vocation, skills, lang, tracks);
			final Behaviour behaviour = new Behaviour(movement, period, aggression, flee, flags);
			final Kill kill = new Kill(corpse, butcher);
			return new Race(name, chars, gear, behaviour, kill);
		}
	}
}
